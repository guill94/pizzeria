// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pizzeria.Data;

#nullable disable

namespace pizzeria.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AddressAppUser", b =>
                {
                    b.Property<int>("IdAddress")
                        .HasColumnType("int");

                    b.Property<string>("IdAppUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdAddress", "IdAppUser");

                    b.ToTable("AddressAppUser");
                });

            modelBuilder.Entity("IngredientProduct", b =>
                {
                    b.Property<int>("IdIngredient")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.HasKey("IdIngredient", "IdProduct");

                    b.ToTable("IngredientProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("pizzeria.Models.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Address");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAddress"), 1L, 1);

                    b.Property<string>("AddressesCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressesStreet")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("AddressesZipCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("AdressesCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdAddress");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("pizzeria.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("pizzeria.Models.CarItem", b =>
                {
                    b.Property<int>("IdCarItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_CarItem");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCarItem"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CartId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("Id_Product");

                    b.HasKey("IdCarItem");

                    b.HasIndex("IdProduct");

                    b.ToTable("CarItems");
                });

            modelBuilder.Entity("pizzeria.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCategory");

                    b.HasIndex(new[] { "CategoryName" }, "AK_Categories")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("pizzeria.Models.DeliveryCompany", b =>
                {
                    b.Property<int>("IdDeliveryCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_DeliveryCompany");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeliveryCompany"), 1L, 1);

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CompanyCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyZip")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.HasKey("IdDeliveryCompany");

                    b.ToTable("DeliveryCompanies");
                });

            modelBuilder.Entity("pizzeria.Models.DeliveryPrice", b =>
                {
                    b.Property<int>("IdDeliveryPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_DeliveryPrice");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeliveryPrice"), 1L, 1);

                    b.Property<decimal>("DeliveryDistance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("DeliveryPrice1")
                        .HasColumnType("money")
                        .HasColumnName("DeliveryPrice");

                    b.Property<int>("IdDeliveryPriceRules")
                        .HasColumnType("int")
                        .HasColumnName("Id_DeliveryPriceRules");

                    b.HasKey("IdDeliveryPrice");

                    b.HasIndex("IdDeliveryPriceRules");

                    b.ToTable("DeliveryPrice");
                });

            modelBuilder.Entity("pizzeria.Models.DeliveryPriceRule", b =>
                {
                    b.Property<int>("IdDeliveryPriceRules")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_DeliveryPriceRules");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDeliveryPriceRules"), 1L, 1);

                    b.Property<decimal>("RulesMaxDistance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("RulesPrice")
                        .HasColumnType("money");

                    b.HasKey("IdDeliveryPriceRules");

                    b.ToTable("DeliveryPriceRules");
                });

            modelBuilder.Entity("pizzeria.Models.Ingredient", b =>
                {
                    b.Property<int>("IdIngredient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Ingredient");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIngredient"), 1L, 1);

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdIngredient");

                    b.HasIndex(new[] { "IngredientName" }, "AK_Ingredients")
                        .IsUnique();

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("pizzeria.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Order");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrder"), 1L, 1);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAddress")
                        .HasColumnType("int")
                        .HasColumnName("Id_Address");

                    b.Property<string>("IdAppUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Id_AppUser");

                    b.Property<int?>("IdDeliveryCompany")
                        .HasColumnType("int")
                        .HasColumnName("Id_DeliveryCompany");

                    b.Property<int?>("IdDeliveryPrice")
                        .HasColumnType("int")
                        .HasColumnName("Id_DeliveryPrice");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("Id_Status");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("IdOrder");

                    b.HasIndex("IdAddress");

                    b.HasIndex("IdAppUser");

                    b.HasIndex("IdDeliveryCompany");

                    b.HasIndex("IdDeliveryPrice");

                    b.HasIndex("IdStatus");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("pizzeria.Models.OrderDetail", b =>
                {
                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("Id_Product");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("Id_Order");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("IdProduct", "IdOrder");

                    b.HasIndex("IdOrder");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("pizzeria.Models.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Product");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduct"), 1L, 1);

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("Id_Category");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("money");

                    b.HasKey("IdProduct");

                    b.HasIndex("IdCategory");

                    b.HasIndex(new[] { "ProductName" }, "AK_Products")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("pizzeria.Models.Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatus"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdStatus");

                    b.HasIndex(new[] { "StatusName" }, "AK_Status")
                        .IsUnique();

                    b.ToTable("Status");
                });

            modelBuilder.Entity("ProductsIngredient", b =>
                {
                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("Id_Product");

                    b.Property<int>("IdIngredient")
                        .HasColumnType("int")
                        .HasColumnName("Id_Ingredient");

                    b.HasKey("IdProduct", "IdIngredient");

                    b.HasIndex("IdIngredient");

                    b.ToTable("ProductsIngredients", (string)null);
                });

            modelBuilder.Entity("UsersAddress", b =>
                {
                    b.Property<string>("IdAppUser")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Id_AppUser");

                    b.Property<int>("IdAddress")
                        .HasColumnType("int")
                        .HasColumnName("Id_Address");

                    b.HasKey("IdAppUser", "IdAddress");

                    b.HasIndex("IdAddress");

                    b.ToTable("UsersAddresses", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("pizzeria.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("pizzeria.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzeria.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("pizzeria.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pizzeria.Models.CarItem", b =>
                {
                    b.HasOne("pizzeria.Models.Product", "IdProductNavigation")
                        .WithMany("CarItems")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_CarItems_Products");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("pizzeria.Models.DeliveryPrice", b =>
                {
                    b.HasOne("pizzeria.Models.DeliveryPriceRule", "IdDeliveryPriceRulesNavigation")
                        .WithMany("DeliveryPrices")
                        .HasForeignKey("IdDeliveryPriceRules")
                        .IsRequired()
                        .HasConstraintName("FK_DeliveryPrice_DeliveryPriceRules");

                    b.Navigation("IdDeliveryPriceRulesNavigation");
                });

            modelBuilder.Entity("pizzeria.Models.Order", b =>
                {
                    b.HasOne("pizzeria.Models.Address", "IdAddressNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdAddress")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Addresses");

                    b.HasOne("pizzeria.Models.AppUser", "IdAppUserNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdAppUser")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_AppUsers");

                    b.HasOne("pizzeria.Models.DeliveryCompany", "IdDeliveryCompanyNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdDeliveryCompany")
                        .HasConstraintName("FK_Orders_DeliveryCompanies");

                    b.HasOne("pizzeria.Models.DeliveryPrice", "IdDeliveryPriceNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdDeliveryPrice")
                        .HasConstraintName("FK_Orders_DeliveryPrice");

                    b.HasOne("pizzeria.Models.Status", "IdStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Status");

                    b.Navigation("IdAddressNavigation");

                    b.Navigation("IdAppUserNavigation");

                    b.Navigation("IdDeliveryCompanyNavigation");

                    b.Navigation("IdDeliveryPriceNavigation");

                    b.Navigation("IdStatusNavigation");
                });

            modelBuilder.Entity("pizzeria.Models.OrderDetail", b =>
                {
                    b.HasOne("pizzeria.Models.Order", "IdOrderNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Orders");

                    b.HasOne("pizzeria.Models.Product", "IdProductNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Products");

                    b.Navigation("IdOrderNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("pizzeria.Models.Product", b =>
                {
                    b.HasOne("pizzeria.Models.Category", "IdCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories");

                    b.Navigation("IdCategoryNavigation");
                });

            modelBuilder.Entity("ProductsIngredient", b =>
                {
                    b.HasOne("pizzeria.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IdIngredient")
                        .IsRequired()
                        .HasConstraintName("FK_ProductsIngredients_Ingredients");

                    b.HasOne("pizzeria.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_ProductsIngredients_Products");
                });

            modelBuilder.Entity("UsersAddress", b =>
                {
                    b.HasOne("pizzeria.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("IdAddress")
                        .IsRequired()
                        .HasConstraintName("FK_UsersAddresses_Addresses");

                    b.HasOne("pizzeria.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("IdAppUser")
                        .IsRequired()
                        .HasConstraintName("FK_UsersAddresses_AppUsers");
                });

            modelBuilder.Entity("pizzeria.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("pizzeria.Models.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("pizzeria.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("pizzeria.Models.DeliveryCompany", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("pizzeria.Models.DeliveryPrice", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("pizzeria.Models.DeliveryPriceRule", b =>
                {
                    b.Navigation("DeliveryPrices");
                });

            modelBuilder.Entity("pizzeria.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("pizzeria.Models.Product", b =>
                {
                    b.Navigation("CarItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("pizzeria.Models.Status", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
